/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         3;

deltaT          0.0001;

writeControl    adjustableRunTime;

writeInterval   0.01;

purgeWrite      0;

writeFormat     binary;

writePrecision  12;

writeCompression off;

timeFormat      general;

timePrecision   12;

runTimeModifiable yes;

adjustTimeStep  on;

maxCo           0.9;
maxAlphaCo      0.9;

maxDeltaT       1;

libs            ();

functions
{
    calcGradient
    {
        libs        ("libutilityFunctionObjects.so");
        type        coded;
        name        computeVelocityGradientMag;
        executeControl      timeStep;
        executeInterval     1;
        writeControl        writeTime;
        writeInterval       1;

        codeExecute
        #{
            const volVectorField& U  =  mesh().lookupObject<volVectorField>("U");

            static autoPtr<volScalarField> velocityGradientMagPtr;
            if(!velocityGradientMagPtr.valid()) {
              Info << "Creating velocityGradientMag" << nl;

              velocityGradientMagPtr.set
              (
                  new volScalarField
                  (
                    IOobject
                    (
                        "velocityGradientMag",
                        time_.timeName(),
                        U.mesh(),
                        IOobject::NO_READ,
                        IOobject::AUTO_WRITE
                    ),
                    mag(fvc::grad(U))
                  )
              );
            }
            volScalarField &velocityGradientMag = velocityGradientMagPtr();
            velocityGradientMag.checkIn();
            velocityGradientMag = mag(fvc::grad(U));
            Info << " max velocityGradientMag " << max(velocityGradientMag) << nl;
        #};
    }
}

// ************************************************************************* //
